{"ast":null,"code":"var _jsxFileName = \"E:\\\\L\\xE0m tiktok\\\\google-places-api-demo-type\\\\src\\\\components\\\\GoogleMapOverlay.js\",\n  _s = $RefreshSig$();\nimport anh from \"../assets/test.jpg\";\nimport \"./GoogleMapOverlay.css\";\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\nimport { REACT_APP_GOOGLE_MAPS_KEY } from '../constants/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapContainerStyle = {\n  width: '100vw',\n  height: '100vh'\n};\nconst center = {\n  lat: 21.1365,\n  lng: 105.8176\n};\nconst overlayImageStyle = zoomLevel => ({\n  width: `calc(100vw * ${zoomLevel})`,\n  // Adjust width based on zoom\n  height: `calc(100vh * ${zoomLevel})`,\n  // Adjust height based on zoom\n  opacity: 0.5,\n  // Adjust opacity as needed\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  zIndex: 1,\n  pointerEvents: 'none' // Prevent image interaction\n});\n\nconst GoogleMapOverlay = () => {\n  _s();\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: REACT_APP_GOOGLE_MAPS_KEY\n  });\n  const [zoomLevel, setZoomLevel] = useState(1); // Initial zoom level\n\n  useEffect(() => {\n    // Update zoom level on map zoom change\n    const handleZoomChange = map => setZoomLevel(map.getZoom());\n    if (isLoaded) {\n      const map = window.google.maps.event.addListener(window.google.maps.__gmap_id, 'zoom_changed', handleZoomChange);\n      return () => window.google.maps.event.removeListener(map); // Cleanup\n    }\n  }, [isLoaded]);\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error loading maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      width: '100vw',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      center: center,\n      zoom: zoomLevel // Use dynamic zoom level\n      ,\n      options: {\n        disableDefaultUI: true\n      },\n      onZoomChanged: map => setZoomLevel(map.getZoom()) // Update state on zoom change\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: anh,\n      alt: \"Overlay\",\n      style: overlayImageStyle(zoomLevel) // Dynamic image size based on zoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleMapOverlay, \"zyzLHz5inYPd5CGClrER0k6lqq0=\", false, function () {\n  return [useLoadScript];\n});\n_c = GoogleMapOverlay;\nexport default GoogleMapOverlay;\nvar _c;\n$RefreshReg$(_c, \"GoogleMapOverlay\");","map":{"version":3,"names":["anh","React","useState","useEffect","GoogleMap","useLoadScript","REACT_APP_GOOGLE_MAPS_KEY","mapContainerStyle","width","height","center","lat","lng","overlayImageStyle","zoomLevel","opacity","position","top","left","zIndex","pointerEvents","GoogleMapOverlay","isLoaded","loadError","googleMapsApiKey","setZoomLevel","handleZoomChange","map","getZoom","window","google","maps","event","addListener","__gmap_id","removeListener","disableDefaultUI"],"sources":["E:/LÃ m tiktok/google-places-api-demo-type/src/components/GoogleMapOverlay.js"],"sourcesContent":["\r\nimport anh from \"../assets/test.jpg\"\r\nimport \"./GoogleMapOverlay.css\"\r\nimport React, { useState, useEffect } from 'react';\r\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\r\nimport { REACT_APP_GOOGLE_MAPS_KEY } from '../constants/constants';\r\n\r\nconst mapContainerStyle = {\r\n  width: '100vw',\r\n  height: '100vh',\r\n};\r\n\r\nconst center = {\r\n  lat: 21.1365,\r\n  lng: 105.8176,\r\n};\r\n\r\nconst overlayImageStyle = (zoomLevel) => ({\r\n  width: `calc(100vw * ${zoomLevel})`, // Adjust width based on zoom\r\n  height: `calc(100vh * ${zoomLevel})`, // Adjust height based on zoom\r\n  opacity: 0.5, // Adjust opacity as needed\r\n  position: 'absolute',\r\n  top: 0,\r\n  left: 0,\r\n  zIndex: 1,\r\n  pointerEvents: 'none', // Prevent image interaction\r\n});\r\n\r\nconst GoogleMapOverlay = () => {\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: REACT_APP_GOOGLE_MAPS_KEY,\r\n  });\r\n\r\n  const [zoomLevel, setZoomLevel] = useState(1); // Initial zoom level\r\n\r\n  useEffect(() => {\r\n    // Update zoom level on map zoom change\r\n    const handleZoomChange = (map) => setZoomLevel(map.getZoom());\r\n    if (isLoaded) {\r\n      const map = window.google.maps.event.addListener(\r\n        window.google.maps.__gmap_id,\r\n        'zoom_changed',\r\n        handleZoomChange\r\n      );\r\n      return () => window.google.maps.event.removeListener(map); // Cleanup\r\n    }\r\n  }, [isLoaded]);\r\n\r\n  if (loadError) return <div>Error loading maps</div>;\r\n  if (!isLoaded) return <div>Loading Maps</div>;\r\n\r\n  return (\r\n    <div style={{ position: 'relative', width: '100vw', height: '100vh' }}>\r\n      <GoogleMap\r\n        mapContainerStyle={mapContainerStyle}\r\n        center={center}\r\n        zoom={zoomLevel} // Use dynamic zoom level\r\n        options={{ disableDefaultUI: true }}\r\n        onZoomChanged={(map) => setZoomLevel(map.getZoom())} // Update state on zoom change\r\n      />\r\n      <img\r\n        src={anh}\r\n        alt=\"Overlay\"\r\n        style={overlayImageStyle(zoomLevel)} // Dynamic image size based on zoom\r\n      />\r\n      {/* ... rest of your code (optional scroll control) */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleMapOverlay;"],"mappings":";;AACA,OAAOA,GAAG,MAAM,oBAAoB;AACpC,OAAO,wBAAwB;AAC/B,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,aAAa,QAAQ,wBAAwB;AACjE,SAASC,yBAAyB,QAAQ,wBAAwB;AAAC;AAEnE,MAAMC,iBAAiB,GAAG;EACxBC,KAAK,EAAE,OAAO;EACdC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,MAAM,GAAG;EACbC,GAAG,EAAE,OAAO;EACZC,GAAG,EAAE;AACP,CAAC;AAED,MAAMC,iBAAiB,GAAIC,SAAS,KAAM;EACxCN,KAAK,EAAG,gBAAeM,SAAU,GAAE;EAAE;EACrCL,MAAM,EAAG,gBAAeK,SAAU,GAAE;EAAE;EACtCC,OAAO,EAAE,GAAG;EAAE;EACdC,QAAQ,EAAE,UAAU;EACpBC,GAAG,EAAE,CAAC;EACNC,IAAI,EAAE,CAAC;EACPC,MAAM,EAAE,CAAC;EACTC,aAAa,EAAE,MAAM,CAAE;AACzB,CAAC,CAAC;;AAEF,MAAMC,gBAAgB,GAAG,MAAM;EAAA;EAC7B,MAAM;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAGlB,aAAa,CAAC;IAC5CmB,gBAAgB,EAAElB;EACpB,CAAC,CAAC;EAEF,MAAM,CAACQ,SAAS,EAAEW,YAAY,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE/CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMuB,gBAAgB,GAAIC,GAAG,IAAKF,YAAY,CAACE,GAAG,CAACC,OAAO,EAAE,CAAC;IAC7D,IAAIN,QAAQ,EAAE;MACZ,MAAMK,GAAG,GAAGE,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,KAAK,CAACC,WAAW,CAC9CJ,MAAM,CAACC,MAAM,CAACC,IAAI,CAACG,SAAS,EAC5B,cAAc,EACdR,gBAAgB,CACjB;MACD,OAAO,MAAMG,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,KAAK,CAACG,cAAc,CAACR,GAAG,CAAC,CAAC,CAAC;IAC7D;EACF,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC;EAEd,IAAIC,SAAS,EAAE,oBAAO;IAAA,UAAK;EAAkB;IAAA;IAAA;IAAA;EAAA,QAAM;EACnD,IAAI,CAACD,QAAQ,EAAE,oBAAO;IAAA,UAAK;EAAY;IAAA;IAAA;IAAA;EAAA,QAAM;EAE7C,oBACE;IAAK,KAAK,EAAE;MAAEN,QAAQ,EAAE,UAAU;MAAER,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAA,wBACpE,QAAC,SAAS;MACR,iBAAiB,EAAEF,iBAAkB;MACrC,MAAM,EAAEG,MAAO;MACf,IAAI,EAAEI,SAAU,CAAC;MAAA;MACjB,OAAO,EAAE;QAAEsB,gBAAgB,EAAE;MAAK,CAAE;MACpC,aAAa,EAAGT,GAAG,IAAKF,YAAY,CAACE,GAAG,CAACC,OAAO,EAAE,CAAE,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QACrD,eACF;MACE,GAAG,EAAE5B,GAAI;MACT,GAAG,EAAC,SAAS;MACb,KAAK,EAAEa,iBAAiB,CAACC,SAAS,CAAE,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QACrC;EAAA;IAAA;IAAA;IAAA;EAAA,QAEE;AAEV,CAAC;AAAC,GAxCIO,gBAAgB;EAAA,QACYhB,aAAa;AAAA;AAAA,KADzCgB,gBAAgB;AA0CtB,eAAeA,gBAAgB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}