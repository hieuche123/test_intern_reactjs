{"ast":null,"code":"var _jsxFileName = \"E:\\\\L\\xE0m tiktok\\\\google-places-api-demo-type\\\\src\\\\components\\\\GoogleMapOverlay.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleMapOverlay = () => {\n  _s();\n  const [coordinates, setCoordinates] = useState([{\n    lat: '',\n    lng: ''\n  }]);\n  const [result, setResult] = useState(null);\n  const handleInputChange = (index, event) => {\n    const values = [...coordinates];\n    values[index][event.target.name] = event.target.value;\n    setCoordinates(values);\n  };\n  const handleAddCoordinate = () => {\n    setCoordinates([...coordinates, {\n      lat: '',\n      lng: ''\n    }]);\n  };\n  const handleRemoveCoordinate = index => {\n    const values = [...coordinates];\n    values.splice(index, 1);\n    setCoordinates(values);\n  };\n  const handleCalculate = () => {\n    const validCoords = coordinates.filter(coord => coord.lat && coord.lng);\n    if (validCoords.length === 0) {\n      alert('Please enter at least one valid coordinate');\n      return;\n    }\n    const meanCoordinate = calculateMeanCoordinate(validCoords);\n    setResult(meanCoordinate);\n  };\n  const calculateMeanCoordinate = coords => {\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    coords.forEach(_ref => {\n      let {\n        lat,\n        lng\n      } = _ref;\n      const latRad = degreesToRadians(parseFloat(lat));\n      const lngRad = degreesToRadians(parseFloat(lng));\n      x += Math.cos(latRad) * Math.cos(lngRad);\n      y += Math.cos(latRad) * Math.sin(lngRad);\n      z += Math.sin(latRad);\n    });\n    const total = coords.length;\n    x /= total;\n    y /= total;\n    z /= total;\n    const lngMean = Math.atan2(y, x);\n    const hyp = Math.sqrt(x * x + y * y);\n    const latMean = Math.atan2(z, hyp);\n    return {\n      lat: radiansToDegrees(latMean),\n      lng: radiansToDegrees(lngMean)\n    };\n  };\n  const degreesToRadians = degrees => {\n    return degrees * Math.PI / 180;\n  };\n  const radiansToDegrees = radians => {\n    return radians * 180 / Math.PI;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Geolocation Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), coordinates.map((coordinate, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"lat\",\n        placeholder: \"Latitude\",\n        value: coordinate.lat,\n        onChange: event => handleInputChange(index, event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"lng\",\n        placeholder: \"Longitude\",\n        value: coordinate.lng,\n        onChange: event => handleInputChange(index, event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRemoveCoordinate(index),\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddCoordinate,\n      children: \"Add Coordinate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCalculate,\n      children: \"Calculate Mean Coordinate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Mean Coordinate:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Latitude: \", result.lat]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Longitude: \", result.lng]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleMapOverlay, \"I5AJmOQwAzwzH1A6nBAcVYAYk10=\");\n_c = GoogleMapOverlay;\nexport default GoogleMapOverlay;\nvar _c;\n$RefreshReg$(_c, \"GoogleMapOverlay\");","map":{"version":3,"names":["React","useState","GoogleMapOverlay","coordinates","setCoordinates","lat","lng","result","setResult","handleInputChange","index","event","values","target","name","value","handleAddCoordinate","handleRemoveCoordinate","splice","handleCalculate","validCoords","filter","coord","length","alert","meanCoordinate","calculateMeanCoordinate","coords","x","y","z","forEach","latRad","degreesToRadians","parseFloat","lngRad","Math","cos","sin","total","lngMean","atan2","hyp","sqrt","latMean","radiansToDegrees","degrees","PI","radians","map","coordinate"],"sources":["E:/LÃ m tiktok/google-places-api-demo-type/src/components/GoogleMapOverlay.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst GoogleMapOverlay = () => {\r\n  const [coordinates, setCoordinates] = useState([{ lat: '', lng: '' }]);\r\n  const [result, setResult] = useState(null);\r\n\r\n  const handleInputChange = (index, event) => {\r\n    const values = [...coordinates];\r\n    values[index][event.target.name] = event.target.value;\r\n    setCoordinates(values);\r\n  };\r\n\r\n  const handleAddCoordinate = () => {\r\n    setCoordinates([...coordinates, { lat: '', lng: '' }]);\r\n  };\r\n\r\n  const handleRemoveCoordinate = (index) => {\r\n    const values = [...coordinates];\r\n    values.splice(index, 1);\r\n    setCoordinates(values);\r\n  };\r\n\r\n  const handleCalculate = () => {\r\n    const validCoords = coordinates.filter(coord => coord.lat && coord.lng);\r\n    if (validCoords.length === 0) {\r\n      alert('Please enter at least one valid coordinate');\r\n      return;\r\n    }\r\n\r\n    const meanCoordinate = calculateMeanCoordinate(validCoords);\r\n    setResult(meanCoordinate);\r\n  };\r\n\r\n  const calculateMeanCoordinate = (coords) => {\r\n    let x = 0;\r\n    let y = 0;\r\n    let z = 0;\r\n\r\n    coords.forEach(({ lat, lng }) => {\r\n      const latRad = degreesToRadians(parseFloat(lat));\r\n      const lngRad = degreesToRadians(parseFloat(lng));\r\n      x += Math.cos(latRad) * Math.cos(lngRad);\r\n      y += Math.cos(latRad) * Math.sin(lngRad);\r\n      z += Math.sin(latRad);\r\n    });\r\n\r\n    const total = coords.length;\r\n    x /= total;\r\n    y /= total;\r\n    z /= total;\r\n\r\n    const lngMean = Math.atan2(y, x);\r\n    const hyp = Math.sqrt(x * x + y * y);\r\n    const latMean = Math.atan2(z, hyp);\r\n\r\n    return {\r\n      lat: radiansToDegrees(latMean),\r\n      lng: radiansToDegrees(lngMean)\r\n    };\r\n  };\r\n\r\n  const degreesToRadians = (degrees) => {\r\n    return degrees * Math.PI / 180;\r\n  };\r\n\r\n  const radiansToDegrees = (radians) => {\r\n    return radians * 180 / Math.PI;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Geolocation Calculator</h1>\r\n      {coordinates.map((coordinate, index) => (\r\n        <div key={index}>\r\n          <input\r\n            type=\"text\"\r\n            name=\"lat\"\r\n            placeholder=\"Latitude\"\r\n            value={coordinate.lat}\r\n            onChange={event => handleInputChange(index, event)}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"lng\"\r\n            placeholder=\"Longitude\"\r\n            value={coordinate.lng}\r\n            onChange={event => handleInputChange(index, event)}\r\n          />\r\n          <button onClick={() => handleRemoveCoordinate(index)}>Remove</button>\r\n        </div>\r\n      ))}\r\n      <button onClick={handleAddCoordinate}>Add Coordinate</button>\r\n      <button onClick={handleCalculate}>Calculate Mean Coordinate</button>\r\n      {result && (\r\n        <div>\r\n          <h2>Mean Coordinate:</h2>\r\n          <p>Latitude: {result.lat}</p>\r\n          <p>Longitude: {result.lng}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleMapOverlay;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}