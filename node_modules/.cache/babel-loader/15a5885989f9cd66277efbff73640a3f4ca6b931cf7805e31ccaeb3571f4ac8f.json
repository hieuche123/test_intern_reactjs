{"ast":null,"code":"import { transformToViewState, applyViewStateToTransform, cloneTransform, syncProjection } from '../utils/transform';\nimport { normalizeStyle } from '../utils/style-utils';\nimport { deepEqual } from '../utils/deep-equal';\nconst DEFAULT_STYLE = {\n  version: 8,\n  sources: {},\n  layers: []\n};\nconst pointerEvents = {\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseover: 'onMouseOver',\n  mousemove: 'onMouseMove',\n  click: 'onClick',\n  dblclick: 'onDblClick',\n  mouseenter: 'onMouseEnter',\n  mouseleave: 'onMouseLeave',\n  mouseout: 'onMouseOut',\n  contextmenu: 'onContextMenu',\n  touchstart: 'onTouchStart',\n  touchend: 'onTouchEnd',\n  touchmove: 'onTouchMove',\n  touchcancel: 'onTouchCancel'\n};\nconst cameraEvents = {\n  movestart: 'onMoveStart',\n  move: 'onMove',\n  moveend: 'onMoveEnd',\n  dragstart: 'onDragStart',\n  drag: 'onDrag',\n  dragend: 'onDragEnd',\n  zoomstart: 'onZoomStart',\n  zoom: 'onZoom',\n  zoomend: 'onZoomEnd',\n  rotatestart: 'onRotateStart',\n  rotate: 'onRotate',\n  rotateend: 'onRotateEnd',\n  pitchstart: 'onPitchStart',\n  pitch: 'onPitch',\n  pitchend: 'onPitchEnd'\n};\nconst otherEvents = {\n  wheel: 'onWheel',\n  boxzoomstart: 'onBoxZoomStart',\n  boxzoomend: 'onBoxZoomEnd',\n  boxzoomcancel: 'onBoxZoomCancel',\n  resize: 'onResize',\n  load: 'onLoad',\n  render: 'onRender',\n  idle: 'onIdle',\n  remove: 'onRemove',\n  data: 'onData',\n  styledata: 'onStyleData',\n  sourcedata: 'onSourceData',\n  error: 'onError'\n};\nconst settingNames = ['minZoom', 'maxZoom', 'minPitch', 'maxPitch', 'maxBounds', 'projection', 'renderWorldCopies'];\nconst handlerNames = ['scrollZoom', 'boxZoom', 'dragRotate', 'dragPan', 'keyboard', 'doubleClickZoom', 'touchZoomRotate', 'touchPitch'];\n/**\n * A wrapper for mapbox-gl's Map class\n */\nexport default class Mapbox {\n  constructor(MapClass, props, container) {\n    // mapboxgl.Map instance\n    this._map = null;\n    // Internal states\n    this._internalUpdate = false;\n    this._inRender = false;\n    this._hoveredFeatures = null;\n    this._deferredEvents = {\n      move: false,\n      zoom: false,\n      pitch: false,\n      rotate: false\n    };\n    this._onEvent = e => {\n      // @ts-ignore\n      const cb = this.props[otherEvents[e.type]];\n      if (cb) {\n        cb(e);\n      } else if (e.type === 'error') {\n        console.error(e.error); // eslint-disable-line\n      }\n    };\n\n    this._onPointerEvent = e => {\n      if (e.type === 'mousemove' || e.type === 'mouseout') {\n        this._updateHover(e);\n      }\n      // @ts-ignore\n      const cb = this.props[pointerEvents[e.type]];\n      if (cb) {\n        if (this.props.interactiveLayerIds && e.type !== 'mouseover' && e.type !== 'mouseout') {\n          e.features = this._hoveredFeatures || this._queryRenderedFeatures(e.point);\n        }\n        cb(e);\n        delete e.features;\n      }\n    };\n    this._onCameraEvent = e => {\n      if (!this._internalUpdate) {\n        // @ts-ignore\n        const cb = this.props[cameraEvents[e.type]];\n        if (cb) {\n          cb(e);\n        }\n      }\n      if (e.type in this._deferredEvents) {\n        this._deferredEvents[e.type] = false;\n      }\n    };\n    this._MapClass = MapClass;\n    this.props = props;\n    this._initialize(container);\n  }\n  get map() {\n    return this._map;\n  }\n  get transform() {\n    return this._renderTransform;\n  }\n  setProps(props) {\n    const oldProps = this.props;\n    this.props = props;\n    const settingsChanged = this._updateSettings(props, oldProps);\n    if (settingsChanged) {\n      this._createShadowTransform(this._map);\n    }\n    const sizeChanged = this._updateSize(props);\n    const viewStateChanged = this._updateViewState(props, true);\n    this._updateStyle(props, oldProps);\n    this._updateStyleComponents(props, oldProps);\n    this._updateHandlers(props, oldProps);\n    // If 1) view state has changed to match props and\n    //    2) the props change is not triggered by map events,\n    // it's driven by an external state change. Redraw immediately\n    if (settingsChanged || sizeChanged || viewStateChanged && !this._map.isMoving()) {\n      this.redraw();\n    }\n  }\n  static reuse(props, container) {\n    const that = Mapbox.savedMaps.pop();\n    if (!that) {\n      return null;\n    }\n    const map = that.map;\n    // When reusing the saved map, we need to reparent the map(canvas) and other child nodes\n    // intoto the new container from the props.\n    // Step 1: reparenting child nodes from old container to new container\n    const oldContainer = map.getContainer();\n    container.className = oldContainer.className;\n    while (oldContainer.childNodes.length > 0) {\n      container.appendChild(oldContainer.childNodes[0]);\n    }\n    // Step 2: replace the internal container with new container from the react component\n    // @ts-ignore\n    map._container = container;\n    // With maplibre-gl as mapLib, map uses ResizeObserver to observe when its container resizes.\n    // When reusing the saved map, we need to disconnect the observer and observe the new container.\n    // Step 3: telling the ResizeObserver to disconnect and observe the new container\n    // @ts-ignore\n    const resizeObserver = map._resizeObserver;\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n      resizeObserver.observe(container);\n    }\n    // Step 4: apply new props\n    that.setProps({\n      ...props,\n      styleDiffing: false\n    });\n    map.resize();\n    const {\n      initialViewState\n    } = props;\n    if (initialViewState) {\n      if (initialViewState.bounds) {\n        map.fitBounds(initialViewState.bounds, {\n          ...initialViewState.fitBoundsOptions,\n          duration: 0\n        });\n      } else {\n        that._updateViewState(initialViewState, false);\n      }\n    }\n    // Simulate load event\n    if (map.isStyleLoaded()) {\n      map.fire('load');\n    } else {\n      map.once('styledata', () => map.fire('load'));\n    }\n    // Force reload\n    // @ts-ignore\n    map._update();\n    return that;\n  }\n  /* eslint-disable complexity,max-statements */\n  _initialize(container) {\n    const {\n      props\n    } = this;\n    const {\n      mapStyle = DEFAULT_STYLE\n    } = props;\n    const mapOptions = {\n      ...props,\n      ...props.initialViewState,\n      accessToken: props.mapboxAccessToken || getAccessTokenFromEnv() || null,\n      container,\n      style: normalizeStyle(mapStyle)\n    };\n    const viewState = mapOptions.initialViewState || mapOptions.viewState || mapOptions;\n    Object.assign(mapOptions, {\n      center: [viewState.longitude || 0, viewState.latitude || 0],\n      zoom: viewState.zoom || 0,\n      pitch: viewState.pitch || 0,\n      bearing: viewState.bearing || 0\n    });\n    if (props.gl) {\n      // eslint-disable-next-line\n      const getContext = HTMLCanvasElement.prototype.getContext;\n      // Hijack canvas.getContext to return our own WebGLContext\n      // This will be called inside the mapboxgl.Map constructor\n      // @ts-expect-error\n      HTMLCanvasElement.prototype.getContext = () => {\n        // Unhijack immediately\n        HTMLCanvasElement.prototype.getContext = getContext;\n        return props.gl;\n      };\n    }\n    const map = new this._MapClass(mapOptions);\n    // Props that are not part of constructor options\n    if (viewState.padding) {\n      map.setPadding(viewState.padding);\n    }\n    if (props.cursor) {\n      map.getCanvas().style.cursor = props.cursor;\n    }\n    this._createShadowTransform(map);\n    // Hack\n    // Insert code into map's render cycle\n    const renderMap = map._render;\n    map._render = arg => {\n      this._inRender = true;\n      renderMap.call(map, arg);\n      this._inRender = false;\n    };\n    const runRenderTaskQueue = map._renderTaskQueue.run;\n    map._renderTaskQueue.run = arg => {\n      runRenderTaskQueue.call(map._renderTaskQueue, arg);\n      this._onBeforeRepaint();\n    };\n    map.on('render', () => this._onAfterRepaint());\n    // Insert code into map's event pipeline\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const fireEvent = map.fire;\n    map.fire = this._fireEvent.bind(this, fireEvent);\n    // add listeners\n    map.on('resize', () => {\n      this._renderTransform.resize(map.transform.width, map.transform.height);\n    });\n    map.on('styledata', () => {\n      this._updateStyleComponents(this.props, {});\n      // Projection can be set in stylesheet\n      syncProjection(map.transform, this._renderTransform);\n    });\n    map.on('sourcedata', () => this._updateStyleComponents(this.props, {}));\n    for (const eventName in pointerEvents) {\n      map.on(eventName, this._onPointerEvent);\n    }\n    for (const eventName in cameraEvents) {\n      map.on(eventName, this._onCameraEvent);\n    }\n    for (const eventName in otherEvents) {\n      map.on(eventName, this._onEvent);\n    }\n    this._map = map;\n  }\n  /* eslint-enable complexity,max-statements */\n  recycle() {\n    // Clean up unnecessary elements before storing for reuse.\n    const container = this.map.getContainer();\n    const children = container.querySelector('[mapboxgl-children]');\n    children === null || children === void 0 ? void 0 : children.remove();\n    Mapbox.savedMaps.push(this);\n  }\n  destroy() {\n    this._map.remove();\n  }\n  // Force redraw the map now. Typically resize() and jumpTo() is reflected in the next\n  // render cycle, which is managed by Mapbox's animation loop.\n  // This removes the synchronization issue caused by requestAnimationFrame.\n  redraw() {\n    const map = this._map;\n    // map._render will throw error if style does not exist\n    // https://github.com/mapbox/mapbox-gl-js/blob/fb9fc316da14e99ff4368f3e4faa3888fb43c513\n    //   /src/ui/map.js#L1834\n    if (!this._inRender && map.style) {\n      // cancel the scheduled update\n      if (map._frame) {\n        map._frame.cancel();\n        map._frame = null;\n      }\n      // the order is important - render() may schedule another update\n      map._render();\n    }\n  }\n  _createShadowTransform(map) {\n    const renderTransform = cloneTransform(map.transform);\n    map.painter.transform = renderTransform;\n    this._renderTransform = renderTransform;\n  }\n  /* Trigger map resize if size is controlled\n     @param {object} nextProps\n     @returns {bool} true if size has changed\n   */\n  _updateSize(nextProps) {\n    // Check if size is controlled\n    const {\n      viewState\n    } = nextProps;\n    if (viewState) {\n      const map = this._map;\n      if (viewState.width !== map.transform.width || viewState.height !== map.transform.height) {\n        map.resize();\n        return true;\n      }\n    }\n    return false;\n  }\n  // Adapted from map.jumpTo\n  /* Update camera to match props\n     @param {object} nextProps\n     @param {bool} triggerEvents - should fire camera events\n     @returns {bool} true if anything is changed\n   */\n  _updateViewState(nextProps, triggerEvents) {\n    if (this._internalUpdate) {\n      return false;\n    }\n    const map = this._map;\n    const tr = this._renderTransform;\n    // Take a snapshot of the transform before mutation\n    const {\n      zoom,\n      pitch,\n      bearing\n    } = tr;\n    const isMoving = map.isMoving();\n    if (isMoving) {\n      // All movement of the camera is done relative to the sea level\n      tr.cameraElevationReference = 'sea';\n    }\n    const changed = applyViewStateToTransform(tr, {\n      ...transformToViewState(map.transform),\n      ...nextProps\n    });\n    if (isMoving) {\n      // Reset camera reference\n      tr.cameraElevationReference = 'ground';\n    }\n    if (changed && triggerEvents) {\n      const deferredEvents = this._deferredEvents;\n      // Delay DOM control updates to the next render cycle\n      deferredEvents.move = true;\n      deferredEvents.zoom || (deferredEvents.zoom = zoom !== tr.zoom);\n      deferredEvents.rotate || (deferredEvents.rotate = bearing !== tr.bearing);\n      deferredEvents.pitch || (deferredEvents.pitch = pitch !== tr.pitch);\n    }\n    // Avoid manipulating the real transform when interaction/animation is ongoing\n    // as it would interfere with Mapbox's handlers\n    if (!isMoving) {\n      applyViewStateToTransform(map.transform, nextProps);\n    }\n    return changed;\n  }\n  /* Update camera constraints and projection settings to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateSettings(nextProps, currProps) {\n    const map = this._map;\n    let changed = false;\n    for (const propName of settingNames) {\n      if (propName in nextProps && !deepEqual(nextProps[propName], currProps[propName])) {\n        changed = true;\n        const setter = map[`set${propName[0].toUpperCase()}${propName.slice(1)}`];\n        setter === null || setter === void 0 ? void 0 : setter.call(map, nextProps[propName]);\n      }\n    }\n    return changed;\n  }\n  /* Update map style to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if style is changed\n   */\n  _updateStyle(nextProps, currProps) {\n    if (nextProps.cursor !== currProps.cursor) {\n      this._map.getCanvas().style.cursor = nextProps.cursor || '';\n    }\n    if (nextProps.mapStyle !== currProps.mapStyle) {\n      const {\n        mapStyle = DEFAULT_STYLE,\n        styleDiffing = true\n      } = nextProps;\n      const options = {\n        diff: styleDiffing\n      };\n      if ('localIdeographFontFamily' in nextProps) {\n        // @ts-ignore Mapbox specific prop\n        options.localIdeographFontFamily = nextProps.localIdeographFontFamily;\n      }\n      this._map.setStyle(normalizeStyle(mapStyle), options);\n      return true;\n    }\n    return false;\n  }\n  /* Update fog, light and terrain to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateStyleComponents(nextProps, currProps) {\n    const map = this._map;\n    let changed = false;\n    if (map.isStyleLoaded()) {\n      if ('light' in nextProps && map.setLight && !deepEqual(nextProps.light, currProps.light)) {\n        changed = true;\n        map.setLight(nextProps.light);\n      }\n      if ('fog' in nextProps && map.setFog && !deepEqual(nextProps.fog, currProps.fog)) {\n        changed = true;\n        map.setFog(nextProps.fog);\n      }\n      if ('terrain' in nextProps && map.setTerrain && !deepEqual(nextProps.terrain, currProps.terrain)) {\n        if (!nextProps.terrain || map.getSource(nextProps.terrain.source)) {\n          changed = true;\n          map.setTerrain(nextProps.terrain);\n        }\n      }\n    }\n    return changed;\n  }\n  /* Update interaction handlers to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateHandlers(nextProps, currProps) {\n    var _a, _b;\n    const map = this._map;\n    let changed = false;\n    for (const propName of handlerNames) {\n      const newValue = (_a = nextProps[propName]) !== null && _a !== void 0 ? _a : true;\n      const oldValue = (_b = currProps[propName]) !== null && _b !== void 0 ? _b : true;\n      if (!deepEqual(newValue, oldValue)) {\n        changed = true;\n        if (newValue) {\n          map[propName].enable(newValue);\n        } else {\n          map[propName].disable();\n        }\n      }\n    }\n    return changed;\n  }\n  _queryRenderedFeatures(point) {\n    const map = this._map;\n    const tr = map.transform;\n    const {\n      interactiveLayerIds = []\n    } = this.props;\n    try {\n      map.transform = this._renderTransform;\n      return map.queryRenderedFeatures(point, {\n        layers: interactiveLayerIds.filter(map.getLayer.bind(map))\n      });\n    } catch (_a) {\n      // May fail if style is not loaded\n      return [];\n    } finally {\n      map.transform = tr;\n    }\n  }\n  _updateHover(e) {\n    var _a;\n    const {\n      props\n    } = this;\n    const shouldTrackHoveredFeatures = props.interactiveLayerIds && (props.onMouseMove || props.onMouseEnter || props.onMouseLeave);\n    if (shouldTrackHoveredFeatures) {\n      const eventType = e.type;\n      const wasHovering = ((_a = this._hoveredFeatures) === null || _a === void 0 ? void 0 : _a.length) > 0;\n      const features = this._queryRenderedFeatures(e.point);\n      const isHovering = features.length > 0;\n      if (!isHovering && wasHovering) {\n        e.type = 'mouseleave';\n        this._onPointerEvent(e);\n      }\n      this._hoveredFeatures = features;\n      if (isHovering && !wasHovering) {\n        e.type = 'mouseenter';\n        this._onPointerEvent(e);\n      }\n      e.type = eventType;\n    } else {\n      this._hoveredFeatures = null;\n    }\n  }\n  _fireEvent(baseFire, event, properties) {\n    const map = this._map;\n    const tr = map.transform;\n    const eventType = typeof event === 'string' ? event : event.type;\n    if (eventType === 'move') {\n      this._updateViewState(this.props, false);\n    }\n    if (eventType in cameraEvents) {\n      if (typeof event === 'object') {\n        event.viewState = transformToViewState(tr);\n      }\n      if (this._map.isMoving()) {\n        // Replace map.transform with ours during the callbacks\n        map.transform = this._renderTransform;\n        baseFire.call(map, event, properties);\n        map.transform = tr;\n        return map;\n      }\n    }\n    baseFire.call(map, event, properties);\n    return map;\n  }\n  // All camera manipulations are complete, ready to repaint\n  _onBeforeRepaint() {\n    const map = this._map;\n    // If there are camera changes driven by props, invoke camera events so that DOM controls are synced\n    this._internalUpdate = true;\n    for (const eventType in this._deferredEvents) {\n      if (this._deferredEvents[eventType]) {\n        map.fire(eventType);\n      }\n    }\n    this._internalUpdate = false;\n    const tr = this._map.transform;\n    // Make sure camera matches the current props\n    map.transform = this._renderTransform;\n    this._onAfterRepaint = () => {\n      // Mapbox transitions between non-mercator projection and mercator during render time\n      // Copy it back to the other\n      syncProjection(this._renderTransform, tr);\n      // Restores camera state before render/load events are fired\n      map.transform = tr;\n    };\n  }\n}\nMapbox.savedMaps = [];\n/**\n * Access token can be provided via one of:\n *   mapboxAccessToken prop\n *   access_token query parameter\n *   MapboxAccessToken environment variable\n *   REACT_APP_MAPBOX_ACCESS_TOKEN environment variable\n * @returns access token\n */\nfunction getAccessTokenFromEnv() {\n  let accessToken = null;\n  /* global location, process */\n  if (typeof location !== 'undefined') {\n    const match = /access_token=([^&\\/]*)/.exec(location.search);\n    accessToken = match && match[1];\n  }\n  // Note: This depends on bundler plugins (e.g. webpack) importing environment correctly\n  try {\n    accessToken = accessToken || process.env.MapboxAccessToken;\n  } catch (_a) {\n    // ignore\n  }\n  try {\n    accessToken = accessToken || process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n  } catch (_b) {\n    // ignore\n  }\n  return accessToken;\n}","map":{"version":3,"mappings":"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","names":["transformToViewState","applyViewStateToTransform","cloneTransform","syncProjection","normalizeStyle","deepEqual","DEFAULT_STYLE","version","sources","layers","pointerEvents","mousedown","mouseup","mouseover","mousemove","click","dblclick","mouseenter","mouseleave","mouseout","contextmenu","touchstart","touchend","touchmove","touchcancel","cameraEvents","movestart","move","moveend","dragstart","drag","dragend","zoomstart","zoom","zoomend","rotatestart","rotate","rotateend","pitchstart","pitch","pitchend","otherEvents","wheel","boxzoomstart","boxzoomend","boxzoomcancel","resize","load","render","idle","remove","data","styledata","sourcedata","error","settingNames","handlerNames","Mapbox","constructor","MapClass","props","container","e","cb","type","console","_updateHover","interactiveLayerIds","features","_hoveredFeatures","_queryRenderedFeatures","point","_internalUpdate","_deferredEvents","_MapClass","_initialize","map","_map","transform","_renderTransform","setProps","oldProps","settingsChanged","_updateSettings","_createShadowTransform","sizeChanged","_updateSize","viewStateChanged","_updateViewState","_updateStyle","_updateStyleComponents","_updateHandlers","isMoving","redraw","reuse","that","savedMaps","pop","oldContainer","getContainer","className","childNodes","length","appendChild","_container","resizeObserver","_resizeObserver","disconnect","observe","styleDiffing","initialViewState","bounds","fitBounds","fitBoundsOptions","duration","isStyleLoaded","fire","once","_update","mapStyle","mapOptions","accessToken","mapboxAccessToken","getAccessTokenFromEnv","style","viewState","Object","assign","center","longitude","latitude","bearing","gl","getContext","HTMLCanvasElement","prototype","padding","setPadding","cursor","getCanvas","renderMap","_render","arg","_inRender","call","runRenderTaskQueue","_renderTaskQueue","run","_onBeforeRepaint","on","_onAfterRepaint","fireEvent","_fireEvent","bind","width","height","eventName","_onPointerEvent","_onCameraEvent","_onEvent","recycle","children","querySelector","push","destroy","_frame","cancel","renderTransform","painter","nextProps","triggerEvents","tr","cameraElevationReference","changed","deferredEvents","currProps","propName","setter","toUpperCase","slice","options","diff","localIdeographFontFamily","setStyle","setLight","light","setFog","fog","setTerrain","terrain","getSource","source","newValue","oldValue","enable","disable","queryRenderedFeatures","filter","getLayer","shouldTrackHoveredFeatures","onMouseMove","onMouseEnter","onMouseLeave","eventType","wasHovering","isHovering","baseFire","event","properties","location","match","exec","search","process","env","MapboxAccessToken","REACT_APP_MAPBOX_ACCESS_TOKEN"],"sources":["E:\\Làm tiktok\\google-places-api-demo-type\\node_modules\\react-map-gl\\src\\mapbox\\mapbox.ts"],"sourcesContent":["import {\n  transformToViewState,\n  applyViewStateToTransform,\n  cloneTransform,\n  syncProjection\n} from '../utils/transform';\nimport {normalizeStyle} from '../utils/style-utils';\nimport {deepEqual} from '../utils/deep-equal';\n\nimport type {\n  Transform,\n  ViewState,\n  ViewStateChangeEvent,\n  Point,\n  PointLike,\n  PaddingOptions,\n  MapStyle,\n  ImmutableLike,\n  LngLatBoundsLike,\n  Callbacks,\n  MapEvent,\n  ErrorEvent,\n  MapMouseEvent,\n  MapGeoJSONFeature,\n  MapInstance,\n  MapInstanceInternal\n} from '../types';\n\nexport type MapboxProps<\n  StyleT extends MapStyle = MapStyle,\n  CallbacksT extends Callbacks = {}\n> = Partial<ViewState> &\n  CallbacksT & {\n    // Init options\n    mapboxAccessToken?: string;\n\n    /** Camera options used when constructing the Map instance */\n    initialViewState?: Partial<ViewState> & {\n      /** The initial bounds of the map. If bounds is specified, it overrides longitude, latitude and zoom options. */\n      bounds?: LngLatBoundsLike;\n      /** A fitBounds options object to use only when setting the bounds option. */\n      fitBoundsOptions?: {\n        offset?: PointLike;\n        minZoom?: number;\n        maxZoom?: number;\n        padding?: number | PaddingOptions;\n      };\n    };\n\n    /** If provided, render into an external WebGL context */\n    gl?: WebGLRenderingContext;\n\n    /** For external controller to override the camera state */\n    viewState?: ViewState & {\n      width: number;\n      height: number;\n    };\n\n    // Styling\n\n    /** Mapbox style */\n    mapStyle?: string | StyleT | ImmutableLike<StyleT>;\n    /** Enable diffing when the map style changes\n     * @default true\n     */\n    styleDiffing?: boolean;\n    /** The fog property of the style. Must conform to the Fog Style Specification .\n     * If `undefined` is provided, removes the fog from the map. */\n    fog?: StyleT['fog'];\n    /** Light properties of the map. */\n    light?: StyleT['light'];\n    /** Terrain property of the style. Must conform to the Terrain Style Specification .\n     * If `undefined` is provided, removes terrain from the map. */\n    terrain?: StyleT['terrain'];\n\n    /** Default layers to query on pointer events */\n    interactiveLayerIds?: string[];\n    /** CSS cursor */\n    cursor?: string;\n  };\n\nconst DEFAULT_STYLE = {version: 8, sources: {}, layers: []} as MapStyle;\n\nconst pointerEvents = {\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseover: 'onMouseOver',\n  mousemove: 'onMouseMove',\n  click: 'onClick',\n  dblclick: 'onDblClick',\n  mouseenter: 'onMouseEnter',\n  mouseleave: 'onMouseLeave',\n  mouseout: 'onMouseOut',\n  contextmenu: 'onContextMenu',\n  touchstart: 'onTouchStart',\n  touchend: 'onTouchEnd',\n  touchmove: 'onTouchMove',\n  touchcancel: 'onTouchCancel'\n};\nconst cameraEvents = {\n  movestart: 'onMoveStart',\n  move: 'onMove',\n  moveend: 'onMoveEnd',\n  dragstart: 'onDragStart',\n  drag: 'onDrag',\n  dragend: 'onDragEnd',\n  zoomstart: 'onZoomStart',\n  zoom: 'onZoom',\n  zoomend: 'onZoomEnd',\n  rotatestart: 'onRotateStart',\n  rotate: 'onRotate',\n  rotateend: 'onRotateEnd',\n  pitchstart: 'onPitchStart',\n  pitch: 'onPitch',\n  pitchend: 'onPitchEnd'\n};\nconst otherEvents = {\n  wheel: 'onWheel',\n  boxzoomstart: 'onBoxZoomStart',\n  boxzoomend: 'onBoxZoomEnd',\n  boxzoomcancel: 'onBoxZoomCancel',\n  resize: 'onResize',\n  load: 'onLoad',\n  render: 'onRender',\n  idle: 'onIdle',\n  remove: 'onRemove',\n  data: 'onData',\n  styledata: 'onStyleData',\n  sourcedata: 'onSourceData',\n  error: 'onError'\n};\nconst settingNames = [\n  'minZoom',\n  'maxZoom',\n  'minPitch',\n  'maxPitch',\n  'maxBounds',\n  'projection',\n  'renderWorldCopies'\n];\nconst handlerNames = [\n  'scrollZoom',\n  'boxZoom',\n  'dragRotate',\n  'dragPan',\n  'keyboard',\n  'doubleClickZoom',\n  'touchZoomRotate',\n  'touchPitch'\n];\n\n/**\n * A wrapper for mapbox-gl's Map class\n */\nexport default class Mapbox<\n  StyleT extends MapStyle = MapStyle,\n  CallbacksT extends Callbacks = {},\n  MapT extends MapInstance = MapInstance\n> {\n  private _MapClass: {new (options: any): MapInstance};\n  // mapboxgl.Map instance\n  private _map: MapInstanceInternal<MapT> = null;\n  // User-supplied props\n  props: MapboxProps<StyleT, CallbacksT>;\n\n  // Mapbox map is stateful.\n  // During method calls/user interactions, map.transform is mutated and\n  // deviate from user-supplied props.\n  // In order to control the map reactively, we shadow the transform\n  // with the one below, which reflects the view state resolved from\n  // both user-supplied props and the underlying state\n  private _renderTransform: Transform;\n\n  // Internal states\n  private _internalUpdate: boolean = false;\n  private _inRender: boolean = false;\n  private _hoveredFeatures: MapGeoJSONFeature[] = null;\n  private _deferredEvents: {\n    move: boolean;\n    zoom: boolean;\n    pitch: boolean;\n    rotate: boolean;\n  } = {\n    move: false,\n    zoom: false,\n    pitch: false,\n    rotate: false\n  };\n\n  static savedMaps: Mapbox[] = [];\n\n  constructor(\n    MapClass: {new (options: any): MapInstance},\n    props: MapboxProps<StyleT, CallbacksT>,\n    container: HTMLDivElement\n  ) {\n    this._MapClass = MapClass;\n    this.props = props;\n    this._initialize(container);\n  }\n\n  get map(): MapT {\n    return this._map;\n  }\n\n  get transform(): Transform {\n    return this._renderTransform;\n  }\n\n  setProps(props: MapboxProps<StyleT, CallbacksT>) {\n    const oldProps = this.props;\n    this.props = props;\n\n    const settingsChanged = this._updateSettings(props, oldProps);\n    if (settingsChanged) {\n      this._createShadowTransform(this._map);\n    }\n    const sizeChanged = this._updateSize(props);\n    const viewStateChanged = this._updateViewState(props, true);\n    this._updateStyle(props, oldProps);\n    this._updateStyleComponents(props, oldProps);\n    this._updateHandlers(props, oldProps);\n\n    // If 1) view state has changed to match props and\n    //    2) the props change is not triggered by map events,\n    // it's driven by an external state change. Redraw immediately\n    if (settingsChanged || sizeChanged || (viewStateChanged && !this._map.isMoving())) {\n      this.redraw();\n    }\n  }\n\n  static reuse<StyleT extends MapStyle, CallbacksT extends Callbacks, MapT extends MapInstance>(\n    props: MapboxProps<StyleT, CallbacksT>,\n    container: HTMLDivElement\n  ): Mapbox<StyleT, CallbacksT, MapT> {\n    const that = Mapbox.savedMaps.pop() as Mapbox<StyleT, CallbacksT, MapT>;\n    if (!that) {\n      return null;\n    }\n\n    const map = that.map;\n    // When reusing the saved map, we need to reparent the map(canvas) and other child nodes\n    // intoto the new container from the props.\n    // Step 1: reparenting child nodes from old container to new container\n    const oldContainer = map.getContainer();\n    container.className = oldContainer.className;\n    while (oldContainer.childNodes.length > 0) {\n      container.appendChild(oldContainer.childNodes[0]);\n    }\n    // Step 2: replace the internal container with new container from the react component\n    // @ts-ignore\n    map._container = container;\n\n    // With maplibre-gl as mapLib, map uses ResizeObserver to observe when its container resizes.\n    // When reusing the saved map, we need to disconnect the observer and observe the new container.\n    // Step 3: telling the ResizeObserver to disconnect and observe the new container\n    // @ts-ignore\n    const resizeObserver = map._resizeObserver;\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n      resizeObserver.observe(container);\n    }\n\n    // Step 4: apply new props\n    that.setProps({...props, styleDiffing: false});\n    map.resize();\n    const {initialViewState} = props;\n    if (initialViewState) {\n      if (initialViewState.bounds) {\n        map.fitBounds(initialViewState.bounds, {...initialViewState.fitBoundsOptions, duration: 0});\n      } else {\n        that._updateViewState(initialViewState, false);\n      }\n    }\n\n    // Simulate load event\n    if (map.isStyleLoaded()) {\n      map.fire('load');\n    } else {\n      map.once('styledata', () => map.fire('load'));\n    }\n\n    // Force reload\n    // @ts-ignore\n    map._update();\n    return that;\n  }\n\n  /* eslint-disable complexity,max-statements */\n  _initialize(container: HTMLDivElement) {\n    const {props} = this;\n    const {mapStyle = DEFAULT_STYLE} = props;\n    const mapOptions = {\n      ...props,\n      ...props.initialViewState,\n      accessToken: props.mapboxAccessToken || getAccessTokenFromEnv() || null,\n      container,\n      style: normalizeStyle(mapStyle)\n    };\n\n    const viewState = mapOptions.initialViewState || mapOptions.viewState || mapOptions;\n    Object.assign(mapOptions, {\n      center: [viewState.longitude || 0, viewState.latitude || 0],\n      zoom: viewState.zoom || 0,\n      pitch: viewState.pitch || 0,\n      bearing: viewState.bearing || 0\n    });\n\n    if (props.gl) {\n      // eslint-disable-next-line\n      const getContext = HTMLCanvasElement.prototype.getContext;\n      // Hijack canvas.getContext to return our own WebGLContext\n      // This will be called inside the mapboxgl.Map constructor\n      // @ts-expect-error\n      HTMLCanvasElement.prototype.getContext = () => {\n        // Unhijack immediately\n        HTMLCanvasElement.prototype.getContext = getContext;\n        return props.gl;\n      };\n    }\n\n    const map = new this._MapClass(mapOptions) as MapInstanceInternal<MapT>;\n    // Props that are not part of constructor options\n    if (viewState.padding) {\n      map.setPadding(viewState.padding);\n    }\n    if (props.cursor) {\n      map.getCanvas().style.cursor = props.cursor;\n    }\n    this._createShadowTransform(map);\n\n    // Hack\n    // Insert code into map's render cycle\n    const renderMap = map._render;\n    map._render = (arg: number) => {\n      this._inRender = true;\n      renderMap.call(map, arg);\n      this._inRender = false;\n    };\n    const runRenderTaskQueue = map._renderTaskQueue.run;\n    map._renderTaskQueue.run = (arg: number) => {\n      runRenderTaskQueue.call(map._renderTaskQueue, arg);\n      this._onBeforeRepaint();\n    };\n    map.on('render', () => this._onAfterRepaint());\n    // Insert code into map's event pipeline\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const fireEvent = map.fire;\n    map.fire = this._fireEvent.bind(this, fireEvent);\n\n    // add listeners\n    map.on('resize', () => {\n      this._renderTransform.resize(map.transform.width, map.transform.height);\n    });\n    map.on('styledata', () => {\n      this._updateStyleComponents(this.props, {});\n      // Projection can be set in stylesheet\n      syncProjection(map.transform, this._renderTransform);\n    });\n    map.on('sourcedata', () => this._updateStyleComponents(this.props, {}));\n    for (const eventName in pointerEvents) {\n      map.on(eventName, this._onPointerEvent);\n    }\n    for (const eventName in cameraEvents) {\n      map.on(eventName, this._onCameraEvent);\n    }\n    for (const eventName in otherEvents) {\n      map.on(eventName, this._onEvent);\n    }\n    this._map = map;\n  }\n  /* eslint-enable complexity,max-statements */\n\n  recycle() {\n    // Clean up unnecessary elements before storing for reuse.\n    const container = this.map.getContainer();\n    const children = container.querySelector('[mapboxgl-children]');\n    children?.remove();\n\n    Mapbox.savedMaps.push(this);\n  }\n\n  destroy() {\n    this._map.remove();\n  }\n\n  // Force redraw the map now. Typically resize() and jumpTo() is reflected in the next\n  // render cycle, which is managed by Mapbox's animation loop.\n  // This removes the synchronization issue caused by requestAnimationFrame.\n  redraw() {\n    const map = this._map as any;\n    // map._render will throw error if style does not exist\n    // https://github.com/mapbox/mapbox-gl-js/blob/fb9fc316da14e99ff4368f3e4faa3888fb43c513\n    //   /src/ui/map.js#L1834\n    if (!this._inRender && map.style) {\n      // cancel the scheduled update\n      if (map._frame) {\n        map._frame.cancel();\n        map._frame = null;\n      }\n      // the order is important - render() may schedule another update\n      map._render();\n    }\n  }\n\n  _createShadowTransform(map: any) {\n    const renderTransform = cloneTransform(map.transform);\n    map.painter.transform = renderTransform;\n\n    this._renderTransform = renderTransform;\n  }\n\n  /* Trigger map resize if size is controlled\n     @param {object} nextProps\n     @returns {bool} true if size has changed\n   */\n  _updateSize(nextProps: MapboxProps<StyleT>): boolean {\n    // Check if size is controlled\n    const {viewState} = nextProps;\n    if (viewState) {\n      const map = this._map;\n      if (viewState.width !== map.transform.width || viewState.height !== map.transform.height) {\n        map.resize();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Adapted from map.jumpTo\n  /* Update camera to match props\n     @param {object} nextProps\n     @param {bool} triggerEvents - should fire camera events\n     @returns {bool} true if anything is changed\n   */\n  _updateViewState(nextProps: MapboxProps<StyleT>, triggerEvents: boolean): boolean {\n    if (this._internalUpdate) {\n      return false;\n    }\n    const map = this._map;\n\n    const tr = this._renderTransform;\n    // Take a snapshot of the transform before mutation\n    const {zoom, pitch, bearing} = tr;\n    const isMoving = map.isMoving();\n\n    if (isMoving) {\n      // All movement of the camera is done relative to the sea level\n      tr.cameraElevationReference = 'sea';\n    }\n    const changed = applyViewStateToTransform(tr, {\n      ...transformToViewState(map.transform),\n      ...nextProps\n    });\n    if (isMoving) {\n      // Reset camera reference\n      tr.cameraElevationReference = 'ground';\n    }\n\n    if (changed && triggerEvents) {\n      const deferredEvents = this._deferredEvents;\n      // Delay DOM control updates to the next render cycle\n      deferredEvents.move = true;\n      deferredEvents.zoom ||= zoom !== tr.zoom;\n      deferredEvents.rotate ||= bearing !== tr.bearing;\n      deferredEvents.pitch ||= pitch !== tr.pitch;\n    }\n\n    // Avoid manipulating the real transform when interaction/animation is ongoing\n    // as it would interfere with Mapbox's handlers\n    if (!isMoving) {\n      applyViewStateToTransform(map.transform, nextProps);\n    }\n\n    return changed;\n  }\n\n  /* Update camera constraints and projection settings to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateSettings(nextProps: MapboxProps<StyleT>, currProps: MapboxProps<StyleT>): boolean {\n    const map = this._map;\n    let changed = false;\n    for (const propName of settingNames) {\n      if (propName in nextProps && !deepEqual(nextProps[propName], currProps[propName])) {\n        changed = true;\n        const setter = map[`set${propName[0].toUpperCase()}${propName.slice(1)}`];\n        setter?.call(map, nextProps[propName]);\n      }\n    }\n    return changed;\n  }\n\n  /* Update map style to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if style is changed\n   */\n  _updateStyle(nextProps: MapboxProps<StyleT>, currProps: MapboxProps<StyleT>): boolean {\n    if (nextProps.cursor !== currProps.cursor) {\n      this._map.getCanvas().style.cursor = nextProps.cursor || '';\n    }\n    if (nextProps.mapStyle !== currProps.mapStyle) {\n      const {mapStyle = DEFAULT_STYLE, styleDiffing = true} = nextProps;\n      const options: any = {\n        diff: styleDiffing\n      };\n      if ('localIdeographFontFamily' in nextProps) {\n        // @ts-ignore Mapbox specific prop\n        options.localIdeographFontFamily = nextProps.localIdeographFontFamily;\n      }\n      this._map.setStyle(normalizeStyle(mapStyle), options);\n      return true;\n    }\n    return false;\n  }\n\n  /* Update fog, light and terrain to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateStyleComponents(nextProps: MapboxProps<StyleT>, currProps: MapboxProps<StyleT>): boolean {\n    const map = this._map;\n    let changed = false;\n    if (map.isStyleLoaded()) {\n      if ('light' in nextProps && map.setLight && !deepEqual(nextProps.light, currProps.light)) {\n        changed = true;\n        map.setLight(nextProps.light);\n      }\n      if ('fog' in nextProps && map.setFog && !deepEqual(nextProps.fog, currProps.fog)) {\n        changed = true;\n        map.setFog(nextProps.fog);\n      }\n      if (\n        'terrain' in nextProps &&\n        map.setTerrain &&\n        !deepEqual(nextProps.terrain, currProps.terrain)\n      ) {\n        if (!nextProps.terrain || map.getSource(nextProps.terrain.source)) {\n          changed = true;\n          map.setTerrain(nextProps.terrain);\n        }\n      }\n    }\n    return changed;\n  }\n\n  /* Update interaction handlers to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateHandlers(nextProps: MapboxProps<StyleT>, currProps: MapboxProps<StyleT>): boolean {\n    const map = this._map;\n    let changed = false;\n    for (const propName of handlerNames) {\n      const newValue = nextProps[propName] ?? true;\n      const oldValue = currProps[propName] ?? true;\n      if (!deepEqual(newValue, oldValue)) {\n        changed = true;\n        if (newValue) {\n          map[propName].enable(newValue);\n        } else {\n          map[propName].disable();\n        }\n      }\n    }\n    return changed;\n  }\n\n  _onEvent = (e: MapEvent<MapT>) => {\n    // @ts-ignore\n    const cb = this.props[otherEvents[e.type]];\n    if (cb) {\n      cb(e);\n    } else if (e.type === 'error') {\n      console.error((e as ErrorEvent<MapT>).error); // eslint-disable-line\n    }\n  };\n\n  private _queryRenderedFeatures(point: Point) {\n    const map = this._map;\n    const tr = map.transform;\n    const {interactiveLayerIds = []} = this.props;\n    try {\n      map.transform = this._renderTransform;\n      return map.queryRenderedFeatures(point, {\n        layers: interactiveLayerIds.filter(map.getLayer.bind(map))\n      });\n    } catch {\n      // May fail if style is not loaded\n      return [];\n    } finally {\n      map.transform = tr;\n    }\n  }\n\n  _updateHover(e: MapMouseEvent<MapT>) {\n    const {props} = this;\n    const shouldTrackHoveredFeatures =\n      props.interactiveLayerIds && (props.onMouseMove || props.onMouseEnter || props.onMouseLeave);\n\n    if (shouldTrackHoveredFeatures) {\n      const eventType = e.type;\n      const wasHovering = this._hoveredFeatures?.length > 0;\n      const features = this._queryRenderedFeatures(e.point);\n      const isHovering = features.length > 0;\n\n      if (!isHovering && wasHovering) {\n        e.type = 'mouseleave';\n        this._onPointerEvent(e);\n      }\n      this._hoveredFeatures = features;\n      if (isHovering && !wasHovering) {\n        e.type = 'mouseenter';\n        this._onPointerEvent(e);\n      }\n      e.type = eventType;\n    } else {\n      this._hoveredFeatures = null;\n    }\n  }\n\n  _onPointerEvent = (e: MapMouseEvent<MapT> | MapMouseEvent<MapT>) => {\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      this._updateHover(e);\n    }\n\n    // @ts-ignore\n    const cb = this.props[pointerEvents[e.type]];\n    if (cb) {\n      if (this.props.interactiveLayerIds && e.type !== 'mouseover' && e.type !== 'mouseout') {\n        e.features = this._hoveredFeatures || this._queryRenderedFeatures(e.point);\n      }\n      cb(e);\n      delete e.features;\n    }\n  };\n\n  _onCameraEvent = (e: ViewStateChangeEvent<MapT>) => {\n    if (!this._internalUpdate) {\n      // @ts-ignore\n      const cb = this.props[cameraEvents[e.type]];\n      if (cb) {\n        cb(e);\n      }\n    }\n    if (e.type in this._deferredEvents) {\n      this._deferredEvents[e.type] = false;\n    }\n  };\n\n  _fireEvent(baseFire: Function, event: string | MapEvent<MapT>, properties?: object) {\n    const map = this._map;\n    const tr = map.transform;\n\n    const eventType = typeof event === 'string' ? event : event.type;\n    if (eventType === 'move') {\n      this._updateViewState(this.props, false);\n    }\n    if (eventType in cameraEvents) {\n      if (typeof event === 'object') {\n        (event as unknown as ViewStateChangeEvent<MapT>).viewState = transformToViewState(tr);\n      }\n      if (this._map.isMoving()) {\n        // Replace map.transform with ours during the callbacks\n        map.transform = this._renderTransform;\n        baseFire.call(map, event, properties);\n        map.transform = tr;\n\n        return map;\n      }\n    }\n    baseFire.call(map, event, properties);\n\n    return map;\n  }\n\n  // All camera manipulations are complete, ready to repaint\n  _onBeforeRepaint() {\n    const map = this._map;\n\n    // If there are camera changes driven by props, invoke camera events so that DOM controls are synced\n    this._internalUpdate = true;\n    for (const eventType in this._deferredEvents) {\n      if (this._deferredEvents[eventType]) {\n        map.fire(eventType);\n      }\n    }\n    this._internalUpdate = false;\n\n    const tr = this._map.transform;\n    // Make sure camera matches the current props\n    map.transform = this._renderTransform;\n\n    this._onAfterRepaint = () => {\n      // Mapbox transitions between non-mercator projection and mercator during render time\n      // Copy it back to the other\n      syncProjection(this._renderTransform, tr);\n      // Restores camera state before render/load events are fired\n      map.transform = tr;\n    };\n  }\n\n  _onAfterRepaint: () => void;\n}\n\n/**\n * Access token can be provided via one of:\n *   mapboxAccessToken prop\n *   access_token query parameter\n *   MapboxAccessToken environment variable\n *   REACT_APP_MAPBOX_ACCESS_TOKEN environment variable\n * @returns access token\n */\nfunction getAccessTokenFromEnv(): string {\n  let accessToken = null;\n\n  /* global location, process */\n  if (typeof location !== 'undefined') {\n    const match = /access_token=([^&\\/]*)/.exec(location.search);\n    accessToken = match && match[1];\n  }\n\n  // Note: This depends on bundler plugins (e.g. webpack) importing environment correctly\n  try {\n    accessToken = accessToken || process.env.MapboxAccessToken;\n  } catch {\n    // ignore\n  }\n\n  try {\n    accessToken = accessToken || process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n  } catch {\n    // ignore\n  }\n\n  return accessToken;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}