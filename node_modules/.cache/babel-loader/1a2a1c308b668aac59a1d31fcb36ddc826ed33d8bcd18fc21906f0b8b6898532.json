{"ast":null,"code":"var _jsxFileName = \"E:\\\\L\\xE0m tiktok\\\\google-places-api-demo-type\\\\src\\\\components\\\\GoogleMapOverlay.js\",\n  _s = $RefreshSig$();\nimport anh from \"../assets/test.jpg\";\nimport \"./GoogleMapOverlay.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, useLoadScript } from \"@react-google-maps/api\";\nimport { REACT_APP_GOOGLE_MAPS_KEY } from \"../constants/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"100vh\"\n};\nconst center = {\n  lat: 21.1365,\n  lng: 105.8176\n};\nconst overlayImageStyle = opacity => ({\n  width: \"100vw\",\n  height: \"100vh\",\n  opacity: opacity,\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n  zIndex: 1,\n  pointerEvents: \"none\" // Ensure image doesn't interfere with map interaction\n});\n\nconst GoogleMapOverlay = () => {\n  _s();\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: REACT_APP_GOOGLE_MAPS_KEY\n  });\n  const [opacity, setOpacity] = useState(0.5);\n  const [simulatedZoomLevel, setSimulatedZoomLevel] = useState(1); // Initial zoom level\n\n  // Function to adjust opacity based on simulated zoom (replace with your logic)\n  const calculateOpacity = zoomLevel => {\n    // Example: Higher zoom -> lower opacity\n    return 1 - zoomLevel / 10; // Adjust the formula as needed\n  };\n\n  // Handle mouse wheel scroll event on the map container\n  const handleMapScroll = event => {\n    const delta = event.deltaY / 100; // Normalize scroll amount\n    const zoomChange = delta > 0 ? -0.1 : 0.1; // Adjust based on scroll direction\n    const newZoomLevel = Math.max(1, Math.min(10, simulatedZoomLevel + zoomChange)); // Keep zoom within bounds\n\n    setSimulatedZoomLevel(newZoomLevel);\n    const newOpacity = calculateOpacity(newZoomLevel);\n    setOpacity(newOpacity);\n  };\n  useEffect(() => {\n    // Add event listener for mouse wheel scroll on map container\n    const mapContainer = document.querySelector('.gm-style .gm-style-map');\n    mapContainer.addEventListener('wheel', handleMapScroll);\n    return () => {\n      // Remove event listener on component unmount\n      mapContainer.removeEventListener('wheel', handleMapScroll);\n    };\n  }, []);\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error loading maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading Maps\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      center: center,\n      zoom: 13 // Set a default zoom for the map\n      ,\n      options: {\n        disableDefaultUI: true\n      } // Hide default zoom controls\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: anh,\n      alt: \"Overlay\",\n      style: overlayImageStyle(opacity)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleMapOverlay, \"s1po8eS+syk9cf4V+xXQRfY9Bcw=\", false, function () {\n  return [useLoadScript];\n});\n_c = GoogleMapOverlay;\nexport default GoogleMapOverlay;\nvar _c;\n$RefreshReg$(_c, \"GoogleMapOverlay\");","map":{"version":3,"names":["anh","React","useState","useEffect","GoogleMap","useLoadScript","REACT_APP_GOOGLE_MAPS_KEY","mapContainerStyle","width","height","center","lat","lng","overlayImageStyle","opacity","position","top","left","zIndex","pointerEvents","GoogleMapOverlay","isLoaded","loadError","googleMapsApiKey","setOpacity","simulatedZoomLevel","setSimulatedZoomLevel","calculateOpacity","zoomLevel","handleMapScroll","event","delta","deltaY","zoomChange","newZoomLevel","Math","max","min","newOpacity","mapContainer","document","querySelector","addEventListener","removeEventListener","disableDefaultUI"],"sources":["E:/LÃ m tiktok/google-places-api-demo-type/src/components/GoogleMapOverlay.js"],"sourcesContent":["import anh from \"../assets/test.jpg\";\r\nimport \"./GoogleMapOverlay.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { GoogleMap, useLoadScript } from \"@react-google-maps/api\";\r\nimport { REACT_APP_GOOGLE_MAPS_KEY } from \"../constants/constants\";\r\n\r\nconst mapContainerStyle = {\r\n  width: \"100vw\",\r\n  height: \"100vh\",\r\n};\r\n\r\nconst center = {\r\n  lat: 21.1365,\r\n  lng: 105.8176,\r\n};\r\n\r\nconst overlayImageStyle = (opacity) => ({\r\n  width: \"100vw\",\r\n  height: \"100vh\",\r\n  opacity: opacity,\r\n  position: \"absolute\",\r\n  top: 0,\r\n  left: 0,\r\n  zIndex: 1,\r\n  pointerEvents: \"none\", // Ensure image doesn't interfere with map interaction\r\n});\r\n\r\nconst GoogleMapOverlay = () => {\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: REACT_APP_GOOGLE_MAPS_KEY,\r\n  });\r\n\r\n  const [opacity, setOpacity] = useState(0.5);\r\n  const [simulatedZoomLevel, setSimulatedZoomLevel] = useState(1); // Initial zoom level\r\n\r\n  // Function to adjust opacity based on simulated zoom (replace with your logic)\r\n  const calculateOpacity = (zoomLevel) => {\r\n    // Example: Higher zoom -> lower opacity\r\n    return 1 - zoomLevel / 10; // Adjust the formula as needed\r\n  };\r\n\r\n  // Handle mouse wheel scroll event on the map container\r\n  const handleMapScroll = (event) => {\r\n    const delta = event.deltaY / 100; // Normalize scroll amount\r\n    const zoomChange = delta > 0 ? -0.1 : 0.1; // Adjust based on scroll direction\r\n    const newZoomLevel = Math.max(1, Math.min(10, simulatedZoomLevel + zoomChange)); // Keep zoom within bounds\r\n\r\n    setSimulatedZoomLevel(newZoomLevel);\r\n    const newOpacity = calculateOpacity(newZoomLevel);\r\n    setOpacity(newOpacity);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Add event listener for mouse wheel scroll on map container\r\n    const mapContainer = document.querySelector('.gm-style .gm-style-map');\r\n    mapContainer.addEventListener('wheel', handleMapScroll);\r\n\r\n    return () => {\r\n      // Remove event listener on component unmount\r\n      mapContainer.removeEventListener('wheel', handleMapScroll);\r\n    };\r\n  }, []);\r\n\r\n  if (loadError) return <div>Error loading maps</div>;\r\n  if (!isLoaded) return <div>Loading Maps</div>;\r\n\r\n  return (\r\n    <div style={{ position: \"relative\", width: \"100vw\", height: \"100vh\" }}>\r\n      <GoogleMap\r\n        mapContainerStyle={mapContainerStyle}\r\n        center={center}\r\n        zoom={13} // Set a default zoom for the map\r\n        options={{ disableDefaultUI: true }} // Hide default zoom controls\r\n      />\r\n      <img src={anh} alt=\"Overlay\" style={overlayImageStyle(opacity)} />\r\n      {/* Add your custom zoom control element here, calling handleSimulatedZoomChange */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleMapOverlay;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}